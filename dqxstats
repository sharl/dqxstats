#!/usr/bin/env perl
# -*- coding: utf-8 -*-
use strict;
use warnings;
use File::Basename 'basename';
use Config::Tiny;
use Getopt::Long;
use Encode;
use AnyEvent;
use AnyEvent::HTTP;

my $conf = $ENV{HOME}.'/.'.basename($0);
my $fnoun  = '%sの称号が%sになった！';
my $format = '%sの%sのレベルが%sになった！';
my $repute = '%sの%sの評判が%sになった！';
my $effect = '%sの%sが全職業で+%dになった！';
my $efup   = '%sの%sが全職業で+%dから+%dに上がった！';
my $efdown = '%sの%sが全職業で+%dから%+dに下がった！';
my $efvani = '%sの全職業で%sの効果が消えた！';
my @job_keys = qw(戦士 僧侶 魔法使い 武闘家 盗賊 旅芸人 バトルマスター パラディン 魔法戦士 レンジャー 賢者 スーパースター まもの使い どうぐ使い 踊り子 占い師 天地雷鳴士);
my @effect_keys = qw(さいだいＨＰ さいだいＭＰ こうげき魔力 かいふく魔力 ちから みのまもり すばやさ きようさ みりょく);
my @param_keys = qw(さいだいHP さいだいMP こうげき力 こうげき力・右 こうげき力・左 しゅび力 こうげき魔力 かいふく魔力 ちから みのまもり すばやさ きようさ みりょく おしゃれさ おもさ);
my @skill_keys = qw(
	片手剣 両手剣 短剣 スティック 両手杖 ヤリ オノ 棍 ツメ ムチ 扇 ハンマー ブーメラン 弓 格闘 盾
	ゆうかん しんこう心 まほう きあい おたから きょくげい とうこん フォース サバイバル はくあい さとり オーラ まものマスター アイテムマスター うた おどり うらない しょうかん
);

my $ini = Config::Tiny->read($conf) || Config::Tiny->new;

sub usage {
    my $code = shift || -1;

    printf STDERR "Usage: %s [-h] [-p [name]] [-j [name]] [-s [name]] [id]\n", basename($0);
    exit $code;
}

GetOptions('help' => \my $help,
	   'print:s@' => \my $prints,
	   'jobs:s@' => \my $jobs,
	   'skills:s@' => \my $skills) or usage(2);
usage(1) if $help;

$prints = join('|', map {$_ || '.*'} @{$prints});
$jobs   = join('|', map {$_ || '.*'} @{$jobs});
$skills = join('|', map {$_ || '.*'} @{$skills});

if ($prints or $jobs or $skills) {
    my $infofmt =<<EOD;
|戦|僧|魔|武|盗|旅|バ|パ|魔|レ|賢|ス|ま|ど|踊|占|天|
|士|侶|使|闘|賊|芸|ト|ラ|戦|ン|者|パ|も|う|り|師|地|
|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|
EOD
    my $baseline = (split("\n", $infofmt))[0];
    Encode::from_to($baseline, 'UTF-8', 'eucjp');
    my $width = length($baseline);

    foreach my $id (keys %{$ini}) {
	my ($skill, $srepute) = ('', 0);
	foreach my $_skill (grep /職人$/o, keys %{$ini->{$id}}) {
	    if ($ini->{$id}{$_skill} > $srepute) {
		$srepute = $ini->{$id}{$_skill};
		$skill = $_skill;
	    }
	}
	$srepute = '' unless $skill;

	my $n = $ini->{$id}{name};
	Encode::from_to($n, 'UTF-8', 'eucjp');
	my $t = $ini->{$id}{noun} || '';
	Encode::from_to($t, 'UTF-8', 'eucjp');
	my $s = $skill || '';
	Encode::from_to($s, 'UTF-8', 'eucjp');
	my $r = $ini->{$id}{'評判'} || '';
	Encode::from_to($r, 'UTF-8', 'eucjp');
	my $f = $ini->{$id}{'釣り'} || '';
	if ($f) {
	    $f = sprintf(' 釣 %2s', $f);
	    Encode::from_to($f, 'UTF-8', 'eucjp');
	}

	my $len = $width - length($n) - 1 - 1 - 2 - 1 - length($r) - length($f);

	my $nameline = sprintf("%s %*s %2s %s%s %s\n", $n, $len, $s, $srepute, $r, $f, $t);
	Encode::from_to($nameline, 'eucjp', 'UTF-8');

	if ($prints) {
	    if ($ini->{$id}{name} =~ /\A$prints\z/o) {
		printf $nameline.$infofmt, map {
		    my $level = $ini->{$id}{$_};
		    ($level and $level > 99) ? (sprintf '%c%d', 87 + $level / 10, $level % 10) : $level ? (sprintf '%2d', $level) : '　';
		} @job_keys;
	    }
	} elsif ($jobs) {
	    print $nameline if $ini->{$id}{name} =~ /\A$jobs\z/o;
	    next;
	} elsif ($skills) {
	    my $skillfmt =<<EOD;
|片剣|両剣|短剣|ステ|両杖|ヤリ|オノ| 棍 |
|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|
|ツメ|ムチ| 扇 |ハン|ブメ| 弓 |格闘| 盾 |
|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|
|ゆう|しん|まほ|きあ|おた|きょ|とう|フォ|サバ|
|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|
|はく|さと|オラ|まも|アイ|うた|おど|うら|しょ|
|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|%4s|
EOD
	    if ($ini->{$id}{name} =~ /\A$skills\z/o) {
		my @l = ();
		my $total = 0;
		foreach my $_s (@skill_keys) {
		    my $val = $ini->{$id}{$_s} || 0;
		    $total += $val;
		}
		print "$ini->{$id}{name} $total\n";
		printf $skillfmt, map {$ini->{$id}{$_} || 0} @skill_keys;
	    }
	    next;
	}
	if ($prints and $ini->{$id}{name} =~ /\A$prints\z/o) {
	    foreach my $effect (@effect_keys) {
		printf "全職業で%s+%s\n", $effect, $ini->{$id}{$effect} if $ini->{$id}{$effect};
	    }
	}
    }
    exit;
}

my ($pat) = (
    '<p id="myCharacterTitle">(.*?)</p>.*?'.
    '<h2 id="myCharacterName">\[(.*?)\]</h2>.*?'.
    '<div id="myCharacterStatusList">.*?<dl>.*?<dt>職　業</dt>.*?<dd>：&nbsp;(.*?)</dd>.*?<dt>レベル</dt>.*?<dd>：&nbsp;(\d+)</dd>.*?'.
    '<div class="parameter">(.*?<th><span>.*?</span></th>.*?<td>\d+</td>.*?)</table>.*?'.
    '<div class="skill">(.*?<th><span>.*?</span></th>.*?<td>.*?</td>.*?)</table>'.
    '(.*?<div class="craftsman">.*?<th><span>(.*?)</span></th>.*?<td><span>Lv (\d+)</span></td>.*?<th><span>評判</span></th>.*?<td>(.*?)</td>)?'.
    '(.*?<th><span>釣りレベル</span></th>.*?<span>Lv&nbsp;(\d+)</span>)?'.
    '(.*?<div class="skillEffect">.*)?'
    );

my $change;
my $cv = AnyEvent->condvar;

sub request {
    my $id = shift;

    my $target = 'https://hiroba.dqx.jp/sc/character/'.$id.'/status/';

    $cv->begin;
    http_get $target, timeout => 5, recurse => 0, sub {
	my ($body, $headers) = @_;

	if ($headers->{Status} == 200) {
	    my ($noun, $name, $job, $level, $params, $sps, undef, $skill, $slevel, $srepute, undef, $flevel, $effects) = $body =~ /$pat/so;

	    unless ($name) {
		$cv->end;
		return;
	    }
	    my %effects;
	    if ($effects) {
		foreach ($effects =~ /<a href="javascript:;" class="tooltip">全職業で(.*?\+\d+?)<span class="tip">/go) {
		    my ($k, $v) = split('\+');
		    $effects{$k} += $v;
		}
	    }

	    if (defined $ini->{$id}{name}) {
		if (! defined $ini->{$id}{noun} || $ini->{$id}{noun} ne $noun) {
		    printf($fnoun."\n", $name, $noun);
		    $ini->{$id}{noun} = $noun;
		    ++$change;
		}

		if (! defined $ini->{$id}{$job} || $ini->{$id}{$job} ne $level) {
		    printf($format."\n", $name, $job, $level);
		    $ini->{$id}{$job} = $level;
		    ++$change;
		}
		my %params = $params =~ m,<th><span>(.*?)</span></th>.*?<td>(\d+)</td>,sgo;
		foreach my $param (@param_keys) {
		    my $p = "p$param";
		    $ini->{$id}{$p} ||= 0;
		    if (defined $params{$param} && $params{$param} > $ini->{$id}{$p}) {
			print "$nameの$paramが$params{$param}になった！\n";
			$ini->{$id}{$p} = $params{$param};
			++$change;
		    }
		}
		my %sps = $sps =~ m,<th><span>(.*?)</span></th>.*?<td><span >(\d+).*?P</span></td>,sgo;
		foreach my $sp (keys %sps) {
		    $ini->{$id}{$sp} ||= 0;
		    if ($sps{$sp} > $ini->{$id}{$sp}) {
			print "$nameの$spスキルポイントが$sps{$sp}になった！\n";
			$ini->{$id}{$sp} = $sps{$sp};
			++$change;
		    }
		}

		if (defined $skill && (! defined $ini->{$id}{$skill} || $ini->{$id}{$skill} ne $slevel)) {
		    my @others = grep /職人$/o && !/$skill/, keys %{$ini->{$id}};
		    if (@others) {
			foreach my $other (@others) {
			    print "$nameが$otherをやめて$skillになった！\n";
			    my $llevel = $ini->{$id}{$other};
			    $ini->{$id}{"${other}h"} = $llevel;
			    delete $ini->{$id}{"${skill}h"};
			    delete $ini->{$id}{$other};
			}
		    } elsif (! defined $ini->{$id}{$skill}) {
			print "$nameが$skillになった！\n";
		    } else {
			printf($format."\n", $name, $skill, $slevel);
		    }
		    $ini->{$id}{$skill} = $slevel;
		    ++$change;
		}
		if (defined $srepute && (! defined $ini->{$id}{'評判'} || $ini->{$id}{'評判'} ne $srepute)) {
		    printf($repute."\n", $name, $skill, $srepute);
		    $ini->{$id}{'評判'} = $srepute;
		    ++$change;
		}
		if (defined $flevel && (! defined $ini->{$id}{'釣り'} || $ini->{$id}{'釣り'} ne $flevel)) {
		    printf($format."\n", $name, '釣り', $flevel);
		    $ini->{$id}{'釣り'} = $flevel;
		    ++$change;
		}

		if (grep /$job/, @job_keys) {
		    foreach my $ekey (@effect_keys) {
			if (! defined $ini->{$id}{$ekey} && defined $effects{$ekey}) {
			    printf($effect."\n", $name, $ekey, $effects{$ekey});
			    $ini->{$id}{$ekey} = $effects{$ekey};
			    ++$change;
			} elsif (defined $ini->{$id}{$ekey} && ! defined $effects{$ekey}) {
			    printf($efvani."\n", $name, $ekey);
			    delete $ini->{$id}{$ekey};
			    ++$change;
			} elsif ($effects{$ekey} && $ini->{$id}{$ekey} ne $effects{$ekey}) {
			    printf(($effects{$ekey} > $ini->{$id}{$ekey} ? $efup : $efdown)."\n",
				   $name, $ekey, $ini->{$id}{$ekey}, $effects{$ekey});
			    $ini->{$id}{$ekey} = $effects{$ekey};
			    ++$change;
			}
		    }
		}
	    } else {
		$ini->{$id}{name} = $name;
		$ini->{$id}{noun} = $noun;
		$ini->{$id}{$job} = $level;
		$ini->{$id}{$skill} = $slevel  if $skill;
		$ini->{$id}{'評判'} = $srepute if $srepute;
		$ini->{$id}{'釣り'} = $flevel  if $flevel;
		foreach my $ekey (keys %effects) {
		    $ini->{$id}{$ekey} = $effects{$ekey} if $effects{$ekey};
		}
		++$change;
	    }
	}
	$cv->end;
    };
}

request($_) for (@ARGV ? @ARGV : keys %{$ini});
$cv->recv;
$ini->write($conf) if $change;
